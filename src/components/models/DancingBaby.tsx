import * as THREE from 'three'
import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations, useMatcapTexture } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

/*
original file auto-generated by: https://github.com/pmndrs/gltfjsx
edited by: @firxworx

author: Punkinob (https://sketchfab.com/Punkinob)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/dancing-baby-model-v2-f78e6c976e8847f0a574c69d3d0ed256
title: Dancing Baby Model (v2)
*/

const MODEL_FILE = 'dancing-baby.glb'

type GLTFResult = GLTF & {
  nodes: {
    diaper: THREE.SkinnedMesh
    eyeball: THREE.SkinnedMesh
    filler: THREE.SkinnedMesh
    iris: THREE.SkinnedMesh
    lips: THREE.SkinnedMesh
    pin2: THREE.SkinnedMesh
    pinhead: THREE.SkinnedMesh
    pupil: THREE.SkinnedMesh
    sftypin: THREE.SkinnedMesh
    skin: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {}
}

// from gltfjsx -
// type ActionName = 'Armature|mixamo.com|Layer0'
// type GLTFActions = Record<ActionName, THREE.AnimationAction>

/**
 * Component that renders a chrome textured break-dancing baby GLB with an animation from Mixamo.
 *
 * The model file was downloaded as an FBX from Sketchfab that was loaded + animated in Mixamo,
 * and then downloaded + opened in Blender where it was exported as GLB/GLTF.
 */
export const DancingBaby: React.FC<JSX.IntrinsicElements['group']> = (props) => {
  const groupRef = useRef<THREE.Group>()
  const { nodes, animations } = useGLTF(MODEL_FILE) as GLTFResult
  const { actions, names } = useAnimations(animations, groupRef) // <GLTFActions>

  const animationIndex = 0

  // chrome 3B3C3F_DAD9D5_929290_ABACA8
  // if you prefer bronze-ish gold, swap the id below with: 422509_C89536_824512_0A0604
  const [matcapMatBody] = useMatcapTexture('3B3C3F_DAD9D5_929290_ABACA8', 1024)
  // white E8E5DE_B5AFA6_CCC5BC_C4C4BB
  const [matcapDiaper] = useMatcapTexture('E8E5DE_B5AFA6_CCC5BC_C4C4BB', 1024)
  // lightblue 7DA1BA_A4CCE8_5D7A8B_5E7C94
  const [matcapEye] = useMatcapTexture('7DA1BA_A4CCE8_5D7A8B_5E7C94', 1024)
  // gray 636363_AAAAAA_949494_252525
  const [matcapPupil] = useMatcapTexture('636363_AAAAAA_949494_252525', 1024)

  useEffect(() => {
    // reset animations, fade-in, play
    actions[names[animationIndex]]?.reset().fadeIn(0.5).play()

    return () => {
      // fade out in effect clean-up
      actions[names[animationIndex]]?.fadeOut(0.5)
    }
  }, [actions, names, animationIndex])

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={[0.09, 0.09, 0.09]}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh geometry={nodes.diaper.geometry} material={nodes.diaper.material} skeleton={nodes.diaper.skeleton}>
          <meshMatcapMaterial attach="material" matcap={matcapDiaper} />
        </skinnedMesh>
        <skinnedMesh
          geometry={nodes.eyeball.geometry}
          material={nodes.eyeball.material}
          skeleton={nodes.eyeball.skeleton}
        >
          <meshMatcapMaterial attach="material" matcap={matcapDiaper} />
        </skinnedMesh>
        <skinnedMesh geometry={nodes.filler.geometry} material={nodes.filler.material} skeleton={nodes.filler.skeleton}>
          <meshMatcapMaterial attach="material" matcap={matcapMatBody} />
        </skinnedMesh>
        <skinnedMesh geometry={nodes.iris.geometry} material={nodes.iris.material} skeleton={nodes.iris.skeleton}>
          <meshMatcapMaterial attach="material" matcap={matcapEye} />
        </skinnedMesh>
        <skinnedMesh geometry={nodes.lips.geometry} material={nodes.lips.material} skeleton={nodes.lips.skeleton}>
          <meshMatcapMaterial attach="material" matcap={matcapMatBody} />
        </skinnedMesh>
        <skinnedMesh geometry={nodes.pin2.geometry} material={nodes.pin2.material} skeleton={nodes.pin2.skeleton}>
          <meshMatcapMaterial attach="material" matcap={matcapMatBody} />
        </skinnedMesh>
        <skinnedMesh
          geometry={nodes.pinhead.geometry}
          material={nodes.pinhead.material}
          skeleton={nodes.pinhead.skeleton}
        >
          <meshMatcapMaterial attach="material" matcap={matcapMatBody} />
        </skinnedMesh>
        <skinnedMesh geometry={nodes.pupil.geometry} material={nodes.pupil.material} skeleton={nodes.pupil.skeleton}>
          <meshMatcapMaterial attach="material" matcap={matcapPupil} />
        </skinnedMesh>
        <skinnedMesh
          geometry={nodes.sftypin.geometry}
          material={nodes.sftypin.material}
          skeleton={nodes.sftypin.skeleton}
        >
          <meshMatcapMaterial attach="material" matcap={matcapMatBody} />
        </skinnedMesh>
        <skinnedMesh geometry={nodes.skin.geometry} material={nodes.skin.material} skeleton={nodes.skin.skeleton}>
          <meshMatcapMaterial attach="material" matcap={matcapMatBody} />
        </skinnedMesh>
      </group>
    </group>
  )
}

useGLTF.preload(MODEL_FILE)
